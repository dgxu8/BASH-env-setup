_dirs_aliases:
  - &tmp_dir ~/Downloads/setup

_base_install_node: &base
  __depends__: none
  __rdepends__: none
  _check_cmd: none
  _install_fmt: none
  dir: none
  pre_cmds: none
  name: none
  cmds: none

# If no name, assume entry is string
# cmds is expected to be a list
basic_apt:
  _install_fmt: "sudo apt install {name} -y"
  _check_fmt: "dpkg -s {name} | grep 'ok installed'"
  ripgrep: ripgrep
  fd:
    name: fd-find
    cmds: sudo ln -s /usr/bin/fdfind /usr/bin/fd
  git_gui: git-gui
  clang: clang
  curl: curl # type -p curl to check if we have it
  libclang: libclang-10-dev
  cmake: cmake
  rust:
    pre_cmds: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    name: cargo
  libevent: libevent-dev
  libncurses5: libncurses5-dev
  gh:
    __depends__: curl
    pre_cmds:
      - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      - sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
      - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
      - sudo apt update
    name: gh # Requres apt update before apt install
    cmds: gh auth login
  meld: meld
  lua: lua5.3
  pkgcfg: pkg-config
  libfmt-dev: libfmt-dev
  libspdlog-dev: libspdlog-dev
  nlohmann-json3-dev: nlohmann-json3-dev
  libgrpc++-dev: libgrpc++-dev
  protobuf-compiler-grpc: protobuf-compiler-grpc
  libssl-dev: libssl-dev
  npm:
    __depends__: curl
    pre_cmds:
      - curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
      - sudo apt-get install -y nodejs
    name: nodejs
  vim: vim

wsl_apt:
  _install_fmt: "sudo apt install {name}"
  _check_fmt: "dpkg -s {name} | grep 'ok installed'"
  ubuntu: ubuntu-desktop
  yad: yad
  gedit: gedit

deprecated_apt:
  _install_fmt: "sudo apt install {name}"
  _check_fmt: "dpkg -s {name} | grep 'ok installed'"
  ctags: exuberant-ctags

basic_pip:
  _install_fmt: "pip3 install {name}"
  _check_fmt: "pip3 show {name}"
  pynvim: pynvim
  grip: grip
  tmuxp: tmuxp
  pylint: pylint
  venv: venv

basic_rust:
  _install_fmt: "cargo install {name}"
  _check_fmt: "cargo install --list | grep -w {name}"
  # We don't lock the installs
  __depends__: rust
  gitui: gitui
  difftastic: difftastic
  exa: exa
  delta: git-delta
  atuin:
    __depends__: bash-preexec-sh
    name: atuin
    description: Better bash history
  git-graph: git-graph

# All NPM installs are global
basic_npm:
  _install_fmt: "sudo npm install -g {name}"
  _check_fmt: "npm list -g {name}"
  __depends__: npm
  tldr: tldr
  treesitter:
    name: tree-sitter

basic_gh_release:
  # Install via gh release download -R $repo -p $package_glob
  _install_fmt: "gh release download -R {repo} -p {package_glob}"
  _check_fmt: "which {name}"
  __depends__: gh
  batcat:
    __rdepends__: bat_syntaxes
    dir: *tmp_dir
    name: bat
    description: Improved cat
    repo: sharkdp/bat
    package_glob: bat_*_amd64.deb
    cmds: "sudo dpkg -i bat_*_amd64.deb"
  tmux:
    __depends__: [libevent, libncurses5]
    __rdepends__: [tpm, tmux_resurrect]
    dir: *tmp_dir
    name: tmux
    repo: tmux/tmux
    package_glob: tmux-*.tar.gz
    cmds:
      - tar -zxf tmux-*.tar.gz
      - cd tmux-*/
      - ./configure
      - make -j 20
      - sudo make install
  lazygit:
    __rdepends__: delta
    _install_fmt: "gh release download -R {repo} -p {package_glob} -O {package_out}"
    dir: *tmp_dir
    name: lazygit
    repo: jesseduffield/lazygit
    package_glob: lazygit_*_Linux_x86_64.tar.gz
    package_out: lazygit.tar.gz
    cmds:
      - sudo tar xf lazygit.tar.gz -C /usr/local/bin lazygit

basic_custom:
  _check_fmt: "which {name}"
  nvim:
    # maybe ripgrep/fd
    __rdepends__: &nvim_rdepends [pynvim, fzf, venv, treesitter]
    dir: *tmp_dir
    name: nvim
    cmds:
      - curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
      - chmod u+x nvim.appimage
      - sudo mv ./nvim.appimage /usr/bin/nvim
  gitprompt:
    _check_fmt: "test -f ~/.git-prompt.sh"
    dir: *tmp_dir
    cmds:
      - git clone https://github.com/git/git.git --no-checkout git_completion --depth 1
      - cd git_completion
      - git sparse-checkout init --cone
      - git sparse-checkout set contrib/completion
      - git checkout
      - cp contrib/completion/git-prompt.sh ~/.git-prompt.sh
  fzf:
    name: fzf
    cmds:
      - git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      - ~/.fzf/install
  nvim_packer:
    _check_fmt: "test -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim/"
    cmds: git clone --depth 1 https://github.com/wbthomason/packer.nvim
          ~/.local/share/nvim/site/pack/packer/start/packer.nvim
  tpm:
    _check_fmt: "test -d ~/.tmux/plugins/tpm"
    description: TMUX plugin manager
    cmds: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  ccls:
    __depends__: [clang, libclang]
    dir: *tmp_dir
    name: ccls
    cmds:
      - git clone --depth=1 --recursive https://github.com/MaskRay/ccls
      - cd ccls
      - cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_PREFIX_PATH=/usr/lib/llvm-10
        -DLLVM_INCLUDE_DIR=/usr/lib/llvm-10/include
        -DLLVM_BUILD_INCLUDE_DIR=/usr/include/llvm-10/
      - cmake --build Release -- -j 20
      - cd Release
      - sudo make install
  tmux_resurrect:
    _check_fmt: "test -d ~/.tmux/tmux-resurrect"
    cmds: git clone https://github.com/tmux-plugins/tmux-resurrect
          ~/.tmux/tmux-resurrect
  bat_syntaxes:
    _check_fmt: "bat --list-languages | grep BitBake"
    cmds:
      - mkdir -p ~/.config/bat/syntaxes
      - cd ~/.config/bat/syntaxes
      - git clone https://github.com/Driim/bitbake-syntax
      - bat cache --build
  vim9:
    __rdepends__: [lua]
    dir: *tmp_dir
    name: vim
    cmds:
      - git clone https://github.com/vim/vim.git
      - cd vim/src/
      - make -j 20
      - sudo make install
  bear:
    __depends__: [cmake, pkgcfg, libfmt-dev, libspdlog-dev, nlohmann-json3-dev, libgrpc++-dev, protobuf-compiler-grpc, libssl-dev]
    dir: *tmp_dir
    name: bear
    description: Used to generate a compile_commands.json.
    cmds:
      - git clone https://github.com/rizsotto/Bear.git
      - cd Bear
      - cmake -DENABLE_UNIT_TESTS=OFF -DENABLE_FUNC_TESTS=OFF $BEAR_SOURCE_DIR
      - make all -j 20
      - sudo make install
  nvim_tips:
    __depends__: *nvim_rdepends
    dir: *tmp_dir
    name: nvim
    conflicts: nvim
    cmds:
      - sudo apt install ninja-build gettext libtool libtool-bin cmake g++ pkg-config unzip curl doxygen
      - git clone https://github.com/neovim/neovim
      - cd neovim
      - make CMAKE_BUILD_TYPE=Release -j 20
      - sudo make install
  bash-preexec-sh:
    name: bash_preexec
    cmds:
      - curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh
      # - echo '[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh' >> ~/.bashrc
